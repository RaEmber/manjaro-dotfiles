#!/bin/bash

wallpapers=~/Bilder/wallpaper
specials=$wallpapers/special
usercols=~/.color/user
gtktheme=~/Dokumente/temp/Archie
gtkinstall=$gtktheme/install.sh
mkdir -p $wallpapers
mkdir -p $specials
mkdir -p $usercols

print_help() {
	echo -e "Usage:"
	echo -e "\e[34;1m\$\e[0;34m $(basename $0) -n [-w file, -m, -g, -q, -x name, -d name, -c]...\e[m\tGenerate colorscheme out of wallpaper"
	echo -e "\e[34;1m\$\e[0;34m $(basename $0) -s [-m, -g, -q, -x name, -d name, -c]...\e[m\t\tGenerate colorscheme out of special wallpaper"
	echo -e "\e[34;1m\$\e[0;34m $(basename $0) -u name [-m, -g, -q, -x name, -d name, -c]...\e[m\tLoad user specified colorscheme"
	echo -e "\e[34;1m\$\e[0;34m $(basename $0) [-l, -m, -g, -q, -x name, -d name, -c]...\e[m\tStatic"
	echo -e "Colorscheme generating script based on pywal.\n"
	echo -e " -l \t\tList the user specified colorschemes"
	echo -e " -u name\tLoad user specified colorscheme"
	echo -e " -n \t\tDon't choose new wallpaper or colorscheme"
	echo -e " -m \t\tToggle current wallpaper as special"
	echo -e " -s \t\tChoose wallpaper out of the ones marked as special"
	echo -e " -g \t\tGenerate GTK theme"
	echo -e " -w file\tGenerate colorscheme out of specific wallpaper"
	echo -e " -r\t\tReload last config"
	echo -e " -q\t\tQuiet mode"
	echo -e " -x name\tExport current colorscheme to the user colorschemes"
	echo -e " -d name\tDelete user colorscheme"
	echo -e " -c\t\tPrint color table"
}

w=
wfile=
m=
g=
q=
s=
u=
uname=
l=
n=
x=
xname=
d=
dname=
c=

while getopts "w:mgqhsu:nlx:d:c" arg; do
	case $arg in
		w) # Load specific wallpaper
			w=1
			wfile=$OPTARG;;
		m) # Toggle current wallpaper as special
			m=1;;
		g) # Generate GTK theme
			g=1;;
		q) # Quiet mode
			q=1;;
		s) # Load wallpaper of special folder
			s=1;;
		u) # Load user specific colorscheme
			u=1
			uname=$OPTARG;;
		n) # Don't load wallpaper or colorscheme
			n=1;;
		l) # List user specified colorschemes
			l=1;;
		x) # Export current colorscheme to a user colorscheme
			x=1
			xname=$OPTARG;;
		d) # Delete user colorscheme
			d=1
			dname=$OPTARG;;
		c) # Print color table
			c=1;;
		h) # Help
			print_help
			exit 0;;
		?) # Invalid option
			print_help
			exit 1;;
	esac
done

wal_execute() { # 1: folder/file
	if [[ $q ]] ; then
		wal -i "$1" 1>&/dev/null
	else
		wal -i "$1"
	fi
	file=$(cat ~/.cache/wal/wal)
	mkdir -p ~/.cache/wal/schemes
	ln -sf "$file" ~/.color/currentwallpaper
	source ~/.cache/wal/colors.sh
	bspc config focused_border_color $color4
	bspc config normal_border_color $color7
	bspc config presel_feedback_color $color0
}

if [[ $m ]] ; then
	file=$(cat ~/.cache/wal/wal)
	base=$(basename "$file")
	path=$specials/$base
	if [[ -h $path ]] ; then
		[[ $q ]] || echo -e "Removing \"\e[32;40m$base\e[m\" from \e[33mspecials\e[m"
		rm "$path"
	else
		[[ $q ]] || echo -e "Adding \"\e[32;40m$base\e[m\" to \e[33mspecials\e[m"
		ln -s "$file" "$path"
	fi
fi

gtk_install() {
	[[ $q ]] || echo "Generating gtk theme..."
	if [[ ! -a $gtkinstall ]] ; then
		echo "There is no installation script"
		exit 1
	fi
	ln -sf ~/.cache/wal/colors.scss $gtktheme/colors.scss
	ln -sf ~/.cache/wal/colors.css $gtktheme/colors.css
	ln -sf ~/.cache/wal/colors-gtk2.rc $gtktheme/colors-gtk2.rc
	ln -sf ~/.cache/wal/colors.sh $gtktheme/colors.sh
	if [[ $q ]] ; then
		$gtkinstall 1>&/dev/null
	else
		$gtkinstall
	fi
	exit
}


if [[ $x ]] ; then
	if [[ -a $usercols/$xname.json ]] ; then
		[[ $q ]] || echo "A colorscheme with this name already exists"
		exit 1
	fi
	[[ $q ]] || echo -e "Saving current colorscheme as \"\e[1;34;40m$xname\e[m\""
	filename=$(cat ~/.cache/wal/wal | sed -E "s/\.|\//_/g")
	file=~/.cache/wal/schemes/$filename.json
	cp -T "$file" $usercols/$xname.json
fi

if [[ $d ]] ; then
	file=$usercols/$dname.json
	if [[ -a $file ]] ; then
		[[ $q ]] || echo -e "\e[31mDeleting\e[m colorscheme \"\e[1;34;40m$dname\e[m\""
		rm $file
	else
		[[ $q ]] || echo -e "No user colorscheme \"\e[1;34;40m$dname\e[m\" found"
		exit 1
	fi
fi

if [[ $c ]] ; then
	[[ $q ]] || echo " black   red   green yellow  blue  magenta cyan   white "
	for (( i=0;i<8;i++ )) ; do
		tput setab $i
		printf "       "
	done
	tput sgr0
	echo
	for (( i=8;i<16;i++ )) ; do
		tput setab $i
		printf "       "
	done
	tput sgr0
	echo
fi

if [[ $n ]] ; then
	if [[ $w ]] ; then
		[[ -a $wfile ]] || wfile=$(echo "$(pwd)/$wfile")
		[[ $q ]] || echo -e "Loading from \e[36mspecific\e[m wallpaper '$wfile'"
		wal_execute "$wfile"
	else
		[[ $q ]] || echo -e "Loading from \e[35mrandom\e[m wallpaper"
		wal_execute $wallpapers
	fi
	[[ $g ]] && gtk_install
	exit 0
fi

if [[ $s ]] ; then
	[[ $q ]] || echo -e "Loading \e[33mspecial\e[m wallpaper"
	wal_execute $specials
	[[ $g ]] && gtk_install
	exit 0
fi

if [[ $u ]] ; then
	[[ $q ]] || echo -e "Loading user colorscheme \"\e[1;34;40m$uname\e[m\""
	wal -f ~/.color/user/$uname.json
	[[ $g ]] && gtk_install
	exit 0
fi

if [[ $l ]] ; then
	echo "Applicable colorschemes:"
	cd $usercols
	for line in $(ls *.json | sed "s/\.json//g") ; do
		tput setab 0
		tput setaf 4
		tput bold
		printf $line
		tput sgr0
		echo
	done
fi
[[ $g ]] && gtk_install
exit 0
