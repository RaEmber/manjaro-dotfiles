#!/bin/bash

wallpapers=~/Bilder/wallpaper
specials=$wallpapers/special
usercols=~/.colors/user
mkdir -p $wallpapers
mkdir -p $specials
mkdir -p $usercols

print_help() {
	echo -e "Usage:"
	echo -e "\e[34;1m\$\e[0;34m $(basename $0) [-w file, -m, -g, -q, -x name, -d name]...\e[m\tGenerate colorscheme out of wallpaper"
	echo -e "\e[34;1m\$\e[0;34m $(basename $0) -s [-m, -g, -q, -x name, -d name]...\e[m\t\tGenerate colorscheme out of special wallpaper"
	echo -e "\e[34;1m\$\e[0;34m $(basename $0) -u name [-m, -g, -q, -x name, -d name]...\e[m\tLoad user specified colorscheme"
	echo -e "\e[34;1m\$\e[0;34m $(basename $0) -n [-l, -m, -r, -q, -x name, -d name, -c]...\e[m\t\tstatic"
	echo -e "Colorscheme generating script based on pywal.\n"
	echo -e " -l \t\tList the user specified colorschemes"
	echo -e " -u name\tLoad user specified colorscheme"
	echo -e " -n \t\tDon't choose new wallpaper or colorscheme"
	echo -e " -m \t\tMove current wallpaper to specials/move out of specials to wallpapers"
	echo -e " -s \t\tChoose wallpaper out of the ones marked as special"
	echo -e " -g \t\tGenerate GTK theme"
	echo -e " -w file\tGenerate colorscheme out of specific wallpaper"
	echo -e " -r\t\tReload last config"
	echo -e " -q\t\tQuiet mode"
	echo -e " -x name\tExport current colorscheme to the user colorschemes"
	echo -e " -d name\tDelete user colorscheme"
	echo -e " -c\t\tPrint color table"
}

w=
wfile=
m=
g=
q=
s=
u=
uname=
l=
n=
x=
xname=
d=
dname=
c=

while getopts "w:mgqhsu:nlx:d:c" arg; do
	case $arg in
		w) # Load specific wallpaper
			w=1
			wfile=$OPTARG;;
		m) # TODO: Move current wallpaper to specials/move out of specials to wallpapers
			m=1;;
		g) # TODO: Generate GTK theme
			g=1;;
		q) # Quiet mode
			q=1;;
		s) # Load wallpaper of special folder
			s=1;;
		u) # Load user specific colorscheme
			u=1
			uname=$OPTARG;;
		n) # Don't load wallpaper or colorscheme
			n=1;;
		l) # List user specified colorschemes
			l=1;;
		x) # Export current colorscheme to a user colorscheme
			x=1
			xname=$OPTARG;;
		d) # Delete user colorscheme
			d=1
			dname=$OPTARG;;
		c) # Print color table
			c=1;;
		h) # Help
			print_help
			exit 0;;
		?) # Invalid option
			print_help
			exit 1;;
	esac
done


wal_execute() { # 1: folder/file
	#echo "" > ~/.cache/wal/wal
	wal -i "$1"
	file=$(cat ~/.cache/wal/wal)
	mkdir -p ~/.cache/wal/schemes
	ln -sf "$file" ~/.color/currentwallpaper
	source ~/.cache/wal/colors.sh
	bspc config focused_border_color $color4
	bspc config normal_border_color $color7
	bspc config presel_feedback_color $color0
}

if [[ $m ]] ; then
	file=$(cat ~/.cache/wal/wal)
	base=$(basename "$file")
	path=$specials/$base
	if [[ -h $path ]] ; then
		[[ $q ]] || echo "Removing \"$base\" from specials"
		rm "$path"
	else
		[[ $q ]] || echo "Adding \"$base\" to specials"
		ln -s "$file" "$path"
	fi
fi

if [[ $x ]] ; then
	if [[ -a ~/.color/user/$xname.json ]] ; then
		[[ $q ]] || echo "A colorscheme with this name already exists"
		exit 1;
	fi
	[[ $q ]] || echo -e "Saving current colorscheme as \"\e[1;34;40m$xname\e[m\""
	filename=$(cat ~/.cache/wal/wal | sed -E "s/\.|\//_/g")
	file=~/.cache/wal/schemes/$filename.json
	cp -T $file ~/.color/user/$xname.json
fi

if [[ $d ]] ; then
	file=~/.color/user/$dname.json
	if [[ -a $file ]] ; then
		[[ $q ]] || echo -e "Deleting colorscheme \"\e[1;34;40m$dname\e[m\""
		rm $file
	else
		[[ $q ]] || echo -e "No user colorscheme \"\e[1;34;40m$dname\e[m\" found"
		exit 1
	fi
fi

if [[ $s ]] ; then
	[[ $q ]] || echo "Loading special wallpaper"
	wal_execute $specials
	exit 0
fi

if [[ $u ]] ; then
	[[ $q ]] || echo -e "Loading user specified colorscheme \"\e[1;34;40m$uname\e[m\""
	wal -f ~/.color/user/$uname.json
	exit 0
fi

if [[ $n ]] ; then
	if [[ $l ]] ; then
		echo -e "Applicable colorschemes:"
		cd ~/.color/user
		for line in $(ls *.json | sed "s/\.json//g") ; do
			tput setab 0
			tput setaf 4
			tput bold
			printf $line
			tput sgr0
			echo
		done
	fi
	if [[ $c ]] ; then
		[[ $q ]] || echo -e "Printing color table\n black   red   green yellow  blue  magenta cyan   white "
		for (( i=0;i<8;i++ )) ; do
			tput setab $i
			printf "       "
		done
		tput sgr0
		echo
		for (( i=8;i<16;i++ )) ; do
			tput setab $i
			printf "       "
		done
		tput sgr0
		echo
	fi
	exit 0
fi

if [[ $w ]] ; then
	[[ -a $wfile ]] || wfile=$(echo "$(pwd)/$wfile")
	[[ $q ]] || echo "Loading from specific wallpaper '$wfile'"
	wal_execute "$wfile"
else
	[[ $q ]] || echo "Loading from random wallpaper"
	wal_execute $wallpapers
fi
