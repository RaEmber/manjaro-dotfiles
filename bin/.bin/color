#!/bin/bash

wallpapers=~/Bilder/wallpaper
specials=$wallpapers/special
usercols=~/.color/user
gtktheme=~/.themes/Archie
gtkinstall=regenerate.sh
mkdir -p $wallpapers
mkdir -p $specials
mkdir -p $usercols

print_help() {
	echo -e "Usage:"
	echo -e "\e[34;1m\$\e[0;34m $(basename $0) -n [-w file, -m, -g, -q, -x name, -d name, -c]...\e[m\tGenerate colorscheme out of wallpaper"
	echo -e "\e[34;1m\$\e[0;34m $(basename $0) -s [-m, -g, -q, -x name, -d name, -c]...\e[m\t\tGenerate colorscheme out of special wallpaper"
	echo -e "\e[34;1m\$\e[0;34m $(basename $0) -u name [-m, -g, -q, -x name, -d name, -c]...\e[m\tLoad user specified colorscheme"
	echo -e "\e[34;1m\$\e[0;34m $(basename $0) [-l, -m, -S, -g, -q, -x name, -d name, -c]...\e[m\tStatic"
	echo -e "Colorscheme generating script based on pywal.\n"
	echo -e " -l \t\tList the user specified colorschemes"
	echo -e " -u name\tLoad user specified colorscheme"
	echo -e " -n \t\tDon't choose new wallpaper or colorscheme"
	echo -e " -m \t\tToggle current wallpaper as special"
	echo -e " -s \t\tChoose wallpaper out of the ones marked as special"
	echo -e " -g \t\tGenerate themes"
	echo -e " -S \t\tGenerate slim theme"
	echo -e " -w file\tGenerate colorscheme out of specific wallpaper"
	echo -e " -r\t\tReload last config"
	echo -e " -q\t\tQuiet mode"
	echo -e " -x name\tExport current colorscheme to the user colorschemes"
	echo -e " -d name\tDelete user colorscheme"
	echo -e " -c\t\tPrint color table"
}

w=
wfile=
m=
S=
g=
q=
s=
u=
uname=
l=
n=
x=
xname=
d=
dname=
c=

if (( $#==0 )) ; then
	echo "No arguments means no action..."
	print_help
	exit 0
fi

while getopts "w:mSgqhsu:nlx:d:c" arg; do
	case $arg in
		w) # Load specific wallpaper
			w=1
			wfile=$OPTARG;;
		m) # Toggle current wallpaper as special
			m=1;;
		S) # Generate slim theme
			S=1;;
		g) # Generate themes
			g=1;;
		q) # Quiet mode
			q=1;;
		s) # Load wallpaper of special folder
			s=1;;
		u) # Load user specific colorscheme
			u=1
			uname=$OPTARG;;
		n) # Don't load wallpaper or colorscheme
			n=1;;
		l) # List user specified colorschemes
			l=1;;
		x) # Export current colorscheme to a user colorscheme
			x=1
			xname=$OPTARG;;
		d) # Delete user colorscheme
			d=1
			dname=$OPTARG;;
		c) # Print color table
			c=1;;
		h) # Help
			print_help
			exit 0;;
		?) # Invalid option
			print_help
			exit 1;;
	esac
done

reload_env() {
	file=$(cat ~/.cache/wal/wal)
	mkdir -p ~/.cache/wal/schemes
	ln -sf "$file" ~/.color/currentwallpaper
	source ~/.cache/wal/colors.sh
	bspc config focused_border_color $color4
	bspc config normal_border_color $color7
	bspc config presel_feedback_color $color0
}

wal_execute() { # 1: folder/file
	if [[ $q ]] ; then
		wal -i "$1" 1>&/dev/null
	else
		wal -i "$1"
	fi
	reload_env
}

if [[ $m ]] ; then
	file=$(cat ~/.cache/wal/wal)
	base=$(basename "$file")
	path=$specials/$base
	if [[ -h $path ]] ; then
		[[ $q ]] || echo -e "Removing \"\e[32;40m$base\e[m\" from \e[33mspecials\e[m"
		rm "$path"
	else
		[[ $q ]] || echo -e "Adding \"\e[32;40m$base\e[m\" to \e[33mspecials\e[m"
		ln -s "$file" "$path"
	fi
fi

generate_themes() {
  source ~/.cache/wal/colors.sh
  generate_gtk
  generate_stylus
	exit
}
generate_gtk() {
	[[ $q ]] || echo "Generating gtk theme..."
	if [[ ! -a $gtktheme/$gtkinstall ]] ; then
		echo "There is no installation script"
		exit 1
	fi
	ln -sf ~/.cache/wal/colors.scss $gtktheme/colors.scss
	ln -sf ~/.cache/wal/colors.css $gtktheme/colors.css
	#ln -sf ~/.cache/wal/colors-gtk2.rc $gtktheme/colors-gtk2.rc
	ln -sf ~/.cache/wal/colors.sh $gtktheme/colors.sh
	. ~/.cache/wal/colors.sh
	echo "gtk-color-scheme = \"text_color:$foreground\nbase_color:$background\"" > $gtktheme/colors-gtk2.rc
	echo "gtk-color-scheme = \"fg_color:$color8\nbg_color:$color0\"" >> $gtktheme/colors-gtk2.rc
	echo "gtk-color-scheme = \"selected_fg_color:$background\nselected_bg_color:$foreground\"" >> $gtktheme/colors-gtk2.rc
	echo "gtk-color-scheme = \"titlebar_fg_color:$foreground\ntitlebar_bg_color:$background\"" >> $gtktheme/colors-gtk2.rc
	echo "gtk-color-scheme = \"link_color:$color4\nvisited_link_color:$color5\"" >> $gtktheme/colors-gtk2.rc
	echo "gtk-auto-mnemonics              = 1" >> $gtktheme/colors-gtk2.rc
	echo "gtk-primary-button-warps-slider = 1" >> $gtktheme/colors-gtk2.rc
	echo "include \"main.rc\"" >> $gtktheme/colors-gtk2.rc
	echo "include \"apps.rc\"" >> $gtktheme/colors-gtk2.rc
	echo "include \"hacks.rc\"" >> $gtktheme/colors-gtk2.rc

	cd $gtktheme
	if [[ $q ]] ; then
		./$gtkinstall 1>&/dev/null
	else
		./$gtkinstall
	fi
}
generate_stylus() {
	tee ~/.color/colors.user.css > /dev/null << eof
/* ==UserStyle==
@name           color-import
@namespace      github.com/openstyles/stylus
@version        0.1.0
@description    Importing the colors generated by pywal
@author         Raphael Emberger
@preprocessor   less
==/UserStyle== */
:root {
  --background: $background;
  --l1background: lighten($background, 10%);
  --l2background: lighten($background, 20%);
  --l3background: lighten($background, 30%);
  --l4background: lighten($background, 40%);
  --l5background: lighten($background, 50%);
  --d1background:  darken($background, 10%);
  --d2background:  darken($background, 20%);
  --d3background:  darken($background, 30%);
  --d4background:  darken($background, 40%);
  --d5background:  darken($background, 50%);
  --foreground: $foreground;
  --l1foreground: lighten($foreground, 10%);
  --l2foreground: lighten($foreground, 20%);
  --l3foreground: lighten($foreground, 30%);
  --l4foreground: lighten($foreground, 40%);
  --l5foreground: lighten($foreground, 50%);
  --d1foreground:  darken($foreground, 10%);
  --d2foreground:  darken($foreground, 20%);
  --d3foreground:  darken($foreground, 30%);
  --d4foreground:  darken($foreground, 40%);
  --d5foreground:  darken($foreground, 50%);
  --cursor:     $cursor;
  --l1cursor: lighten($cursor, 10%);
  --l2cursor: lighten($cursor, 20%);
  --l3cursor: lighten($cursor, 30%);
  --l4cursor: lighten($cursor, 40%);
  --l5cursor: lighten($cursor, 50%);
  --d1cursor:  darken($cursor, 10%);
  --d2cursor:  darken($cursor, 20%);
  --d3cursor:  darken($cursor, 30%);
  --d4cursor:  darken($cursor, 40%);
  --d5cursor:  darken($cursor, 50%);
  --black:      $color0;
  --l1black: lighten($color0, 10%);
  --l2black: lighten($color0, 20%);
  --l3black: lighten($color0, 30%);
  --l4black: lighten($color0, 40%);
  --l5black: lighten($color0, 50%);
  --d1black:  darken($color0, 10%);
  --d2black:  darken($color0, 20%);
  --d3black:  darken($color0, 30%);
  --d4black:  darken($color0, 40%);
  --d5black:  darken($color0, 50%);
  --red:        $color1;
  --l1red: lighten($color1, 10%);
  --l2red: lighten($color1, 20%);
  --l3red: lighten($color1, 30%);
  --l4red: lighten($color1, 40%);
  --l5red: lighten($color1, 50%);
  --d1red:  darken($color1, 10%);
  --d2red:  darken($color1, 20%);
  --d3red:  darken($color1, 30%);
  --d4red:  darken($color1, 40%);
  --d5red:  darken($color1, 50%);
  --green:      $color2;
  --l1green: lighten($color2, 10%);
  --l2green: lighten($color2, 20%);
  --l3green: lighten($color2, 30%);
  --l4green: lighten($color2, 40%);
  --l5green: lighten($color2, 50%);
  --d1green:  darken($color2, 10%);
  --d2green:  darken($color2, 20%);
  --d3green:  darken($color2, 30%);
  --d4green:  darken($color2, 40%);
  --d5green:  darken($color2, 50%);
  --yellow:     $color3;
  --l1yellow: lighten($color3, 10%);
  --l2yellow: lighten($color3, 20%);
  --l3yellow: lighten($color3, 30%);
  --l4yellow: lighten($color3, 40%);
  --l5yellow: lighten($color3, 50%);
  --d1yellow:  darken($color3, 10%);
  --d2yellow:  darken($color3, 20%);
  --d3yellow:  darken($color3, 30%);
  --d4yellow:  darken($color3, 40%);
  --d5yellow:  darken($color3, 50%);
  --blue:       $color4;
  --l1blue: lighten($color4, 10%);
  --l2blue: lighten($color4, 20%);
  --l3blue: lighten($color4, 30%);
  --l4blue: lighten($color4, 40%);
  --l5blue: lighten($color4, 50%);
  --d1blue:  darken($color4, 10%);
  --d2blue:  darken($color4, 20%);
  --d3blue:  darken($color4, 30%);
  --d4blue:  darken($color4, 40%);
  --d5blue:  darken($color4, 50%);
  --magenta:    $color5;
  --l1magenta: lighten($color5, 10%);
  --l2magenta: lighten($color5, 20%);
  --l3magenta: lighten($color5, 30%);
  --l4magenta: lighten($color5, 40%);
  --l5magenta: lighten($color5, 50%);
  --d1magenta:  darken($color5, 10%);
  --d2magenta:  darken($color5, 20%);
  --d3magenta:  darken($color5, 30%);
  --d4magenta:  darken($color5, 40%);
  --d5magenta:  darken($color5, 50%);
  --cyan:       $color6;
  --l1cyan: lighten($color6, 10%);
  --l2cyan: lighten($color6, 20%);
  --l3cyan: lighten($color6, 30%);
  --l4cyan: lighten($color6, 40%);
  --l5cyan: lighten($color6, 50%);
  --d1cyan:  darken($color6, 10%);
  --d2cyan:  darken($color6, 20%);
  --d3cyan:  darken($color6, 30%);
  --d4cyan:  darken($color6, 40%);
  --d5cyan:  darken($color6, 50%);
  --lgray:      $color7;
  --l1lgray: lighten($color7, 10%);
  --l2lgray: lighten($color7, 20%);
  --l3lgray: lighten($color7, 30%);
  --l4lgray: lighten($color7, 40%);
  --l5lgray: lighten($color7, 50%);
  --d1lgray:  darken($color7, 10%);
  --d2lgray:  darken($color7, 20%);
  --d3lgray:  darken($color7, 30%);
  --d4lgray:  darken($color7, 40%);
  --d5lgray:  darken($color7, 50%);
  --dgray:      $color8;
  --l1dgray: lighten($color8, 10%);
  --l2dgray: lighten($color8, 20%);
  --l3dgray: lighten($color8, 30%);
  --l4dgray: lighten($color8, 40%);
  --l5dgray: lighten($color8, 50%);
  --d1dgray:  darken($color8, 10%);
  --d2dgray:  darken($color8, 20%);
  --d3dgray:  darken($color8, 30%);
  --d4dgray:  darken($color8, 40%);
  --d5dgray:  darken($color8, 50%);
  --lred:       $color9;
  --l1lred: lighten($color9, 10%);
  --l2lred: lighten($color9, 20%);
  --l3lred: lighten($color9, 30%);
  --l4lred: lighten($color9, 40%);
  --l5lred: lighten($color9, 50%);
  --d1lred:  darken($color9, 10%);
  --d2lred:  darken($color9, 20%);
  --d3lred:  darken($color9, 30%);
  --d4lred:  darken($color9, 40%);
  --d5lred:  darken($color9, 50%);
  --lgreen:     $color10;
  --l1lgreen: lighten($color10, 10%);
  --l2lgreen: lighten($color10, 20%);
  --l3lgreen: lighten($color10, 30%);
  --l4lgreen: lighten($color10, 40%);
  --l5lgreen: lighten($color10, 50%);
  --d1lgreen:  darken($color10, 10%);
  --d2lgreen:  darken($color10, 20%);
  --d3lgreen:  darken($color10, 30%);
  --d4lgreen:  darken($color10, 40%);
  --d5lgreen:  darken($color10, 50%);
  --lyellow:    $color11;
  --l1lyellow: lighten($color11, 10%);
  --l2lyellow: lighten($color11, 20%);
  --l3lyellow: lighten($color11, 30%);
  --l4lyellow: lighten($color11, 40%);
  --l5lyellow: lighten($color11, 50%);
  --d1lyellow:  darken($color11, 10%);
  --d2lyellow:  darken($color11, 20%);
  --d3lyellow:  darken($color11, 30%);
  --d4lyellow:  darken($color11, 40%);
  --d5lyellow:  darken($color11, 50%);
  --lblue:      $color12;
  --l1lblue: lighten($color12, 10%);
  --l2lblue: lighten($color12, 20%);
  --l3lblue: lighten($color12, 30%);
  --l4lblue: lighten($color12, 40%);
  --l5lblue: lighten($color12, 50%);
  --d1lblue:  darken($color12, 10%);
  --d2lblue:  darken($color12, 20%);
  --d3lblue:  darken($color12, 30%);
  --d4lblue:  darken($color12, 40%);
  --d5lblue:  darken($color12, 50%);
  --lmagenta:   $color13;
  --l1lmagenta: lighten($color13, 10%);
  --l2lmagenta: lighten($color13, 20%);
  --l3lmagenta: lighten($color13, 30%);
  --l4lmagenta: lighten($color13, 40%);
  --l5lmagenta: lighten($color13, 50%);
  --d1lmagenta:  darken($color13, 10%);
  --d2lmagenta:  darken($color13, 20%);
  --d3lmagenta:  darken($color13, 30%);
  --d4lmagenta:  darken($color13, 40%);
  --d5lmagenta:  darken($color13, 50%);
  --lcyan:      $color14;
  --l1lcyan: lighten($color14, 10%);
  --l2lcyan: lighten($color14, 20%);
  --l3lcyan: lighten($color14, 30%);
  --l4lcyan: lighten($color14, 40%);
  --l5lcyan: lighten($color14, 50%);
  --d1lcyan:  darken($color14, 10%);
  --d2lcyan:  darken($color14, 20%);
  --d3lcyan:  darken($color14, 30%);
  --d4lcyan:  darken($color14, 40%);
  --d5lcyan:  darken($color14, 50%);
  --white:      $color15;
  --l1white: lighten($color15, 10%);
  --l2white: lighten($color15, 20%);
  --l3white: lighten($color15, 30%);
  --l4white: lighten($color15, 40%);
  --l5white: lighten($color15, 50%);
  --d1white:  darken($color15, 10%);
  --d2white:  darken($color15, 20%);
  --d3white:  darken($color15, 30%);
  --d4white:  darken($color15, 40%);
  --d5white:  darken($color15, 50%);
}
eof
  # open file:///home/alan/.color/colors.user.css in FF to reload
}

slim_theme() {
	. $HOME/.cache/wal/colors.sh
	cat "/usr/share/slim/themes/flatwall/slim.theme.preset" | sed "s/_bg_/$background/g; s/_fg_/$foreground/g; s/_black_/$color0/g; s/_red_/$color1/g; s/_green_/$color2/g; s/_yellow_/$color3/g; s/_blue_/$color4/g; s/_magenta_/$color5/g; s/_cyan_/$color6/g; s/_light_gray_/$color7/g; s/_dark_gray_/$color8/g; s/_light_red_/$color9/g; s/_light_green_/$color10/g; s/_light_yellow_/$color11/g; s/_light_blue_/$color12/g; s/_light_magenta_/$color13/g; s/_light_cyan_/$color14/g; s/_white_/$color15/g" | sudo tee "/usr/share/slim/themes/flatwall/slim.theme" &> /dev/null
}

if [[ $x ]] ; then
	if [[ -a $usercols/$xname.json ]] ; then
		[[ $q ]] || echo "A colorscheme with this name already exists"
		exit 1
	fi
	[[ $q ]] || echo -e "Saving current colorscheme as \"\e[1;34;40m$xname\e[m\""
	filename=$(cat ~/.cache/wal/wal | sed -E "s/\.|\//_/g")
	file=~/.cache/wal/schemes/$filename.json
	cp -T "$file" $usercols/$xname.json
fi

if [[ $d ]] ; then
	file=$usercols/$dname.json
	if [[ -a $file ]] ; then
		[[ $q ]] || echo -e "\e[31mDeleting\e[m colorscheme \"\e[1;34;40m$dname\e[m\""
		rm $file
	else
		[[ $q ]] || echo -e "No user colorscheme \"\e[1;34;40m$dname\e[m\" found"
		exit 1
	fi
fi

if [[ $c ]] ; then
	[[ $q ]] || echo " black   red   green yellow  blue  magenta cyan   white "
	for (( i=0;i<8;i++ )) ; do
		tput setab $i
		printf "       "
	done
	tput sgr0
	echo
	for (( i=8;i<16;i++ )) ; do
		tput setab $i
		printf "       "
	done
	tput sgr0
	echo
fi

if [[ $n ]] ; then
	if [[ $w ]] ; then
		[[ -a $wfile ]] || wfile=$(echo "$(pwd)/$wfile")
		[[ $q ]] || echo -e "Loading from \e[36mspecific\e[m wallpaper '$wfile'"
		wal_execute "$wfile"
	else
		[[ $q ]] || echo -e "Loading from \e[35mrandom\e[m wallpaper"
		wal_execute $wallpapers
	fi
	[[ $g ]] && generate_themes
	exit 0
fi

if [[ $s ]] ; then
	[[ $q ]] || echo -e "Loading \e[33mspecial\e[m wallpaper"
	wal_execute $specials
	[[ $g ]] && generate_themes
	exit 0
fi

if [[ $u ]] ; then
	if [[ ! $q ]] ; then
		echo -e "Loading user colorscheme \"\e[1;34;40m$uname\e[m\""
		wal -f ~/.color/user/$uname.json
	else
		wal -f ~/.color/user/$uname.json 1>&/dev/null
	fi
	reload_env
	[[ $g ]] && generate_themes
	exit 0
fi

if [[ $l ]] ; then
	echo "Applicable colorschemes:"
	cd $usercols
	for line in $(ls *.json | sed "s/\.json//g") ; do
		tput setab 0
		tput setaf 4
		tput bold
		printf $line
		tput sgr0
		echo
	done
fi
if [[ $g ]]; then
	generate_themes
fi
[[ $S ]] && slim_theme
exit 0
