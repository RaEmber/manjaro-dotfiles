#!/bin/bash
# Script to manage wallpaper-dependent colorschemes

WAL_OPTIONS="-a 50"

WALL_DIR="$XDG_PICTURES_DIR/wallpaper"
CONFIG_DIR="$XDG_CONFIG_HOME/color"
SPECIAL_DIR="$CONFIG_DIR/special"
USER_COL_DIR="$CONFIG_DIR/user"
JETBRAINSPYWAL="$HOME/Documents/git/intellijPywal"
JETBRAINS_APPS=(
	".PyCharm2019.3"
	".IntelliJIdea2019.2"
)
mkdir -p $WALL_DIR
mkdir -p $SPECIAL_DIR
mkdir -p $USER_COL_DIR

print_help() {
	echo -e "Usage:"

	echo -e "$(basename $0) \e[0;90m{\e[m-n, -w \e[0;90mfile\e[m, -s, -p, -i \e[0;90mfile}\e[m \e[0;90m[\e[m-m, -x \e[0;90mname\e[m, -q, -c\e[0;90m]\e[m\tGenerate colorscheme out of a wallpaper"
	echo -e "$(basename $0) -u \e[0;90mname [\e[m-q, -c\e[0;90m]\e[m\t\t\t\t\t\tLoad user specified colorscheme"
	echo -e "$(basename $0) \e[0;90m[\e[m-m, -x \e[0;90mname\e[m, -l, -d \e[0;90mname\e[m, -r, -h, -q, -c\e[0;90m]\e[m\t\tOther actions"

	echo -e "\npywal wrapper"
	echo -e "Options:"

	echo -e " -n \t\tGenerate colorscheme out of a random wallpaper"
	echo -e " -w \e[0;90mfile\e[m\tGenerate colorscheme out of specific wallpaper"
	echo -e " -m \t\tMark (toggle) current wallpaper as special"
	echo -e " -s \t\tChoose wallpaper out of the ones marked as special"
	echo -e " -p \t\tFetch a random image from picsum lorem"
	echo -e " -i \e[0;90m[id]\e[m\tFetch a specific image from picsum lorem using the given id"

	echo -e " -b \e[0;90m{haishoku,schemer2,colorz,\e[94mwal\e[90m,colorthief}\e[m\n\t\tUse specific backend. Default: \e[94mwal\e[m"
	echo -e " -x \e[0;90mname\e[m\tExport current colorscheme to the user colorschemes"
	echo -e " -l \t\tList the user specified colorschemes"
	echo -e " -u \e[0;90mname\e[m\tLoad user specified colorscheme"
	echo -e " -d \e[0;90mname\e[m\tDelete user colorscheme"

	echo -e " -r\t\tReload last config"
	echo -e " -q\t\tQuiet mode"
	echo -e " -c\t\tPrint color table"
	echo -e " -h\t\tShow this help text and exit"
}

n=
w=
wfile=
m=
s=
p=
i=
id=
b=
backend='--backend wal'
x=
xname=
l=
u=
uname=
d=
dname=
r=
q=
c=

## Parse arguments

if (( $#==0 )) ; then
	echo "No arguments provided"
	print_help
	exit 0
fi

while getopts "nw:mspi:b:x:ld:u:rqch" arg; do
	case $arg in
		n) # Load random wallpaper
			n=1
			w=
			s=
			p=
			i=
			u=
			;;
		w) # Load specific wallpaper
			w=1
			wfile=$OPTARG
			n=
			s=
			p=
			i=
			u=
			;;
		m) # Toggle current wallpaper as special
			m=1;;
		s) # Load wallpaper of special folder
			s=1
			p=
			i=
			u=
			;;
		p) # Fetch random image from picsum lorem
			p=1
			i=
			;;
		i) # Fetch specific image from picsum lorem
			i=1
			id=$OPTARG
			;;
		b) # Use specific backend
			b=1
			backend="--backend $OPTARG";;
		x) # Export current colorscheme to a user colorscheme
			x=1
			xname=$OPTARG;;
		l) # List user specified colorschemes
			l=1;;
		u) # Load user specific colorscheme
			u=1
			uname=$OPTARG
			n=
			w=
			s=
			;;
		d) # Delete user colorscheme
			d=1
			dname=$OPTARG;;
		r) # Reload config
			r=1;;
		q) # Quiet mode
			q=1;;
		c) # Print color table
			c=1;;
		h) # Help
			print_help
			exit 0;;
		?) # Invalid option
			print_help
			exit 1;;
	esac
done

################################################################################

function reload_env() {
	file="$(cat $XDG_CACHE_HOME/wal/wal)"
	ln -sf "$file" "$CONFIG_DIR/currentwallpaper"
	source "$XDG_CACHE_HOME/wal/colors.sh"

	# Update BSPWM
	bspc config focused_border_color "$color4"
	bspc config normal_border_color "$color7"
	bspc config presel_feedback_color "$color0"

	# convert and scale wallpaper for lockscreen
	wxh=$(identify -format "%wx%h" "$file")
	w=${wxh%%x*}
	h=${wxh##*x}
	res=$(xdpyinfo | grep dimensions | cut -d\  -f7)
	x=${res%%x*}
	y=${res##*x}
	if (( w > x )); then
			# crop sides
			width=$((x*h/y))
			crop=$(((w-width)/2))
			convert -crop "${width}x${h}+${crop#-}+0" -resize $x "$file" ~/.cache/wal/lockscreen.png
	else
			# crop height
			height=$((w*y/x))
			crop=$(((h-height)/2))
			convert -crop "${w}x${height}+0+${crop#-}" -resize $x "$file" ~/.cache/wal/lockscreen.png
	fi

	# convert -resize $(xdpyinfo | grep dimensions | cut -d\  -f7 | cut -dx -f1) "$file" ~/.cache/wal/lockscreen.png

	# Update beautiful-discord's user.css:
	sassc ~/.config/discord/user.scss > ~/.config/discord/user.css

	# Update JetBrains color schemes
	for jetbrains_app in ${JETBRAINS_APPS[@]}; do
		$JETBRAINSPYWAL/intellijPywalGen.sh "$HOME/$jetbrains_app/config"
	done
}

function wal_execute() { # 1: folder/file
	if [[ $q ]] ; then
		wal $WAL_OPTIONS $backend -i "$1" 1>&/dev/null
	else
		wal $WAL_OPTIONS $backend -i "$1"
	fi
	reload_env
}

function gtk_install() {
	[[ $q ]] || echo "Generating gtk theme..."
	if [[ ! -a $gtktheme/$gtkinstall ]] ; then
		echo "There is no installation script"
		exit 1
	fi
	ln -sf "$XDG_CACHE_HOME/wal/colors.scss $gtktheme/colors.scss"
	ln -sf "$XDG_CACHE_HOME/wal/colors.css $gtktheme/colors.css"
	ln -sf "$XDG_CACHE_HOME/wal/colors-gtk2.rc $gtktheme/colors-gtk2.rc"
	ln -sf "$XDG_CACHE_HOME/wal/colors.sh $gtktheme/colors.sh"
	cd $gtktheme
	if [[ $q ]] ; then
		./$gtkinstall 1>&/dev/null
	else
		./$gtkinstall
	fi
	exit
}

function fetch_picsum() { # dir [id] -> id
	picsum_file="$1/picsum.jpg"
	url="https://picsum.photos"
	if [[ $2 ]]; then
		if [[ -f "$1/$2.jpg" ]]; then
			# Picture already fetched before. No need to redownload
			echo "$2"
			return
		fi
		url="$url/id/$2"
	fi
	dims=$(xdpyinfo | grep -oP "(?<=dimensions:\s{4})\d+x\d+(?= pixels)")
	x="${dims%%x*}"
	y="${dims##*x}"
	# Shorter, but ey...
	# xdpyinfo | grep -oP "(?<=dimensions:\s{4})\d+x\d+(?= pixels)" | sed "s/x/\//g"
	url="$url/$x/$y"
	id=$(LANG=C wget "$url" -SO "$picsum_file" 2>&1 | grep -oP '(?<=filename=")\d+(?=-\d+x\d+\.jpg")')
	cp "$picsum_file" "$1/$id.jpg"
	echo "$id"
}

function toggle_special() {
	file="$(cat $XDG_CACHE_HOME/wal/wal)"
	base=$(basename "$file")
	path="$SPECIAL_DIR/$base"
	if [[ -h $path ]] ; then
		[[ $q ]] || echo -e "Removing \"\e[32m$base\e[m\" from \e[33mspecials\e[m"
		rm "$path"
	else
		[[ $q ]] || echo -e "Adding \"\e[32m$base\e[m\" to \e[33mspecials\e[m"
		ln -s "$file" "$path"
	fi
}

function add_to_user_colorschemes() {
	if [[ -a "$USER_COL_DIR/$xname.json" ]] ; then
		[[ $q ]] || echo "A colorscheme with this name already exists"
		exit 1
	fi
	[[ $q ]] || echo -e "Saving current colorscheme as \"\e[1;34m$xname\e[m\""
	filename="$(cat $XDG_CACHE_HOME/wal/wal | sed -E 's/\.|\//_/g')"
	file="$XDG_CACHE_HOME/wal/schemes/${filename}_dark_None_None_1.1.0.json"
	cp -T "$file" "$USER_COL_DIR/$xname.json"
}

function print_color_table() {
	[[ $q ]] || echo " black   red   green yellow  blue  magenta cyan   white "
	for (( i=0;i<8;i++ )) ; do
		tput setab $i
		printf "       "
	done
	tput sgr0
	echo
	for (( i=8;i<16;i++ )) ; do
		tput setab $i
		printf "       "
	done
	tput sgr0
	echo
}

################################################################################

if [[ $n ]] || [[ $w ]] || [[ $s ]] || [[ $p ]] || [[ $i ]]; then # Load random wallpaper
	if [[ $n ]]; then
		[[ $q ]] || echo -e "Loading from \e[35mrandom\e[m wallpaper"
		wal_execute "$WALL_DIR"
	elif [[ $w ]]; then
		[[ $q ]] || echo -e "Loading from \e[36mspecific\e[m wallpaper '$wfile'"
		wal_execute "$wfile"
	elif [[ $s ]]; then
		[[ $q ]] || echo -e "Loading \e[33mspecial\e[m wallpaper"
		wal_execute "$SPECIAL_DIR"
	elif [[ $p ]]; then
		[[ $q ]] || echo -e "Loading from \e[33mpicsum lorem\e[m"
		id=$(fetch_picsum "$WALL_DIR")
		[[ $q ]] || echo -e "Fetched id \e[33m$id\e[m"
		wal_execute "$WALL_DIR/$id.jpg"
	elif [[ $i ]]; then
		[[ $q ]] || echo -e "Loading id \e[33m$id\e[m from \e[33mpicsum lorem\e[m"
		fetch_picsum "$WALL_DIR" "$id" > /dev/null
		wal_execute "$WALL_DIR/$id.jpg"
	fi
	[[ $m ]] && toggle_special
	[[ $x ]] && add_to_user_colorschemes
	[[ $c ]] && print_color_table
elif [[ $u ]]; then
	if [[ ! $q ]] ; then
		echo -e "Loading user colorscheme \"\e[1;34m$uname\e[m\""
		wal $WAL_OPTIONS $backend -f "$USER_COL_DIR/$uname.json"
	else
		wal $WAL_OPTIONS $backend -f "$USER_COL_DIR/$uname.json" 1>&/dev/null
	fi
	[[ $c ]] && print_color_table
	reload_env
else
	[[ $m ]] && toggle_special
	[[ $x ]] && add_to_user_colorschemes
	if [[ $l ]] ; then
		[[ $q ]] || echo "Applicable colorschemes:"
		cd $USER_COL_DIR
		for line in $(ls *.json | sed "s/\.json//g") ; do
			tput setaf 4
			tput bold
			printf "$line"
			tput sgr0
			echo
		done
	fi
	if [[ $d ]] ; then
		file="$USER_COL_DIR/$dname.json"
		if [[ -a $file ]] ; then
			[[ $q ]] || echo -e "\e[31mDeleting\e[m colorscheme \"\e[1;34m$dname\e[m\""
			rm "$file"
		else
			[[ $q ]] || echo -e "No user colorscheme \"\e[1;34m$dname\e[m\" found"
			exit 1
		fi
	fi
	if [[ $r ]]; then
		wal_execute "$(cat ~/.cache/wal/wal)" 
	fi
	[[ $c ]] && print_color_table
fi
